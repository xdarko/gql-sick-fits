# A public facing backend graphql API
# A yoga graphql server will handle queries and mutations specified here
# than it will interact with prisma graphql server to fetch/create the data
# by executing queries and mutations generated by prisma for us (check generate/prisma.graphql)
# ------------------------------------------------------------------------------------------------

# Using specail comment syntax prvided by prisma to get access to prisma's auto generated schemas:
# import * from './generated/prisma.graphql';

# ------ Mutations -----

type Mutation {
  # -------- ITEMS MUTATIONS --------
  createItem(data: ItemCreateInput): Item!
  updateItem(data: ItemUpdateInput): Item!
  deleteItem(id: ID!): Item
  
  # -------- USERS MUTATIONS --------
  signup(email: String!, password: String!, name: String!): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  
  requestPasswordReset(email: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!

  updatePermissions(permissions: [Permission], userId: ID!): User

  # -------- CART MUTATIONS --------
  addToCart(id: ID!): CartItem
  removeFromCart(id: ID!): CartItem

  # -------- ORDERS MUTATIONS --------
  createOrder(token: String): Order!
}

# ----- Queries ------

type Query {
  # -------- ITEMS QUERIES --------
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, first: Int): [Item]!
  item(where: ItemWhereUniqueInput!): Item # Prisma's type, takes an ID
  itemsConnection(where: ItemWhereInput): ItemConnection!
  
  # -------- USERS QUERIES --------
  currentUser: User
  users: [User]!
  
  # -------- ORDERS QUERIES --------
  order(id: ID!): Order
  orders(orderBy: OrderOrderByInput!): [Order]!
}

# custom message:
type SuccessMessage {
  message: String
}

# creating custom user type, since Prisma's one has some private field
# that should not be available on http responses to the client
type User {
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
  cart: [CartItem!]!
}


# ----- Inputs -----

input ItemCreateInput {
  title: String!
  description: String!
  price: Int!
  image: String
  largeImage: String
}

input ItemUpdateInput {
  id: ID!
  title: String
  description: String
  price: Int
  image: String
  largeImage: String
}
