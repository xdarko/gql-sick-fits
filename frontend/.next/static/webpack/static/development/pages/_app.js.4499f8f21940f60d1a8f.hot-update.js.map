{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.4499f8f21940f60d1a8f.hot-update.js","sources":["webpack:///./components/TakeMyMoney.js"],"sourcesContent":["import React from 'react';\r\nimport StripeCheckout from 'react-stripe-checkout';\r\nimport { Mutation } from 'react-apollo';\r\nimport Router from 'next/router';\r\nimport NProgress from 'nprogress';\r\nimport PropTypes from 'prop-types';\r\nimport gql from 'graphql-tag';\r\nimport calcTotalPrice from '../lib/calcTotalPrice';\r\nimport Error from './ErrorMessage';\r\n\r\nimport User, { CURRENT_USER_QUERY } from './User';\r\n\r\nconst CREATE_ORDER_MUTATION = gql`\r\n  mutation createOrder($token: String!) {\r\n    createOrder(token: $token) {\r\n      id\r\n      charge\r\n      total\r\n      items {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction totalItems(cart) {\r\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\r\n}\r\n\r\nclass TakeMyMoney extends React.Component {\r\n  /**\r\n   * Get's stripe transaction token\r\n   * Send it to the server to charge the money\r\n   */\r\n  onToken = async (res, createOrder) => {\r\n    NProgress.start();\r\n    // manually call the mutation once we have the stripe token:\r\n    const order = await createOrder({\r\n      variables: {\r\n        token: res.id,\r\n      },\r\n    }).catch(err => {\r\n      alert(err.message);\r\n    });\r\n    Router.push({\r\n      pathname: '/order',\r\n      query: { id: order.data.createOrder.id },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <User>\r\n        {({ data: { currentUser }, loading }) => {\r\n          if (loading) return null;\r\n          return (\r\n            <Mutation\r\n              mutation={CREATE_ORDER_MUTATION}\r\n              refetchQueries={[{ query: CURRENT_USER_QUERY }]}\r\n            >\r\n              {createOrder => (\r\n                <StripeCheckout\r\n                  amount={calcTotalPrice(currentUser.cart)}\r\n                  name=\"Sick Fits\"\r\n                  description={`Order of ${totalItems(currentUser.cart)} items!`}\r\n                  image={\r\n                    currentUser.cart.length &&\r\n                    currentUser.cart[0].item &&\r\n                    currentUser.cart[0].item.image\r\n                  }\r\n                  stripeKey=\"pk_test_alfzK5WG75BxDvMexBaTsQBV\"\r\n                  currency=\"USD\"\r\n                  email={currentUser.email}\r\n                  token={res => this.onToken(res, createOrder)}\r\n                >\r\n                  {this.props.children}\r\n                </StripeCheckout>\r\n              )}\r\n            </Mutation>\r\n          );\r\n        }}\r\n      </User>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TakeMyMoney;\r\nexport { CREATE_ORDER_MUTATION };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AADA;AADA;AAKA;AACA;AACA;AAVA;AAGA;AAOA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAeA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAoBA;AAGA;;;;AAtDA;AACA;AAwDA;;;;;A","sourceRoot":""}